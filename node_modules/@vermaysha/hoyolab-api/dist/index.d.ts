interface IResponse {
    retcode: number;
    message: string;
    data: unknown;
}

declare enum LanguageEnum {
    SIMPLIFIED_CHINESE = "zh-cn",
    TRADIIONAL_CHINESE = "zh-tw",
    GERMAN = "de-de",
    ENGLISH = "en-us",
    SPANISH = "es-es",
    FRENCH = "fr-fr",
    INDONESIAN = "id-id",
    ITALIAN = "it-it",
    JAPANESE = "ja-jp",
    KOREAN = "ko-kr",
    PORTUGUESE = "pt-pt",
    RUSSIAN = "ru-ru",
    THAI = "th-th",
    TURKISH = "tr-tr",
    VIETNAMESE = "vi-vn"
}

interface ICookie {
    ltoken: string;
    ltuid: number;
    cookieToken?: string | null;
    accountId?: number;
    mi18nLang?: LanguageEnum | string | null;
}

type BodyType = {
    [x: string]: string | number | boolean | null | undefined | string[] | number[] | never[];
};

interface IRedeemCode {
    data: string | null;
    message: string;
    retcode: number;
}

interface IHoyolabOptions {
    /**
     * Cookie Object
     */
    cookie: ICookie | string;
    /**
     * If this property is filled, it will override the value contained in cookie.mi18nLang
     */
    lang?: LanguageEnum;
}

interface IGame {
    game_biz: string;
    region: string;
    game_uid: string;
    nickname: string;
    level: number;
    is_chosen: boolean;
    region_name: string;
    is_official: boolean;
}
interface IGamesList {
    list: IGame[];
}

declare enum GamesEnum {
    GENSHIN_IMPACT = "hk4e_global",
    HONKAI_IMPACT = "bh3_global",
    HONKAI_STAR_RAIL = "hkrpg_global"
}

/**
 * Convert given string to camelCase
 *
 * @param str string The string or text to convert
 * @returns {string}
 */
declare function toCamelCase(str: string): string;
/**
 * Transform camel case to snake case
 *
 * @param text string The string or text to convert
 * @returns {string}
 */
declare function toSnakeCase(text: string): string;
/**
 * Get Server Region by UID
 *
 * @param uid number UID
 * @returns {string}
 */
declare function getServerRegion(uid: number): string;
/**
 * Parse string to LanguageEnum
 *
 * @param lang string | null
 * @returns {LanguageEnum}
 */
declare function parseLang(lang?: string | null): LanguageEnum;

declare class Request {
    private headers;
    private body;
    private params;
    private cache;
    private ds;
    constructor(cookies?: string | null);
    /**
     * Set Referer Headers
     *
     * @param url string URL string of referer
     * @returns {this}
     */
    setReferer(url: string): this;
    /**
     * Set Body Paramter
     *
     * @param body Body Body Parameters as object
     * @returns {this}
     */
    setBody(body: BodyType): this;
    /**
     * Set SearchParams or query parameter
     *
     * @param params BodyType Object of query parameter
     * @returns {this}
     */
    setParams(params: BodyType): this;
    /**
     * Set to used Dynamic Security or not
     *
     * @param flag boolean Flag
     * @returns {this}
     */
    setDs(flag?: boolean): this;
    /**
     * Set Language
     *
     * @param lang Language Language that used for return of API (default: Language.ENGLISH).
     * @returns {this}
     */
    setLang(lang?: LanguageEnum): this;
    /**
     * Send Request
     *
     * @param url string URL String
     * @param method GET|POST Method for request
     * @returns {Promise<IResponse>}
     */
    send(url: string, method?: 'GET' | 'POST'): Promise<IResponse>;
    /**
     * Generate Dynamic Security
     *
     * @returns {string}
     */
    private generateDS;
}

declare class Cache<K, V> extends Map<K, V> {
}

interface IGenshinOptions extends IHoyolabOptions {
    uid?: number;
}

interface IGenshinRecordAvatar {
    id: number;
    image: string;
    name: string;
    element: string;
    fetter: number;
    level: number;
    rarity: number;
    actived_constellation_num: number;
    card_image: string;
    is_chosen: boolean;
}
interface IGenshinRecordStat {
    active_day_number: number;
    achievement_number: number;
    anemoculus_number: number;
    geoculus_number: number;
    avatar_number: number;
    way_point_number: number;
    domain_number: number;
    spiral_abyss: string;
    precious_chest_number: number;
    luxurious_chest_number: number;
    exquisite_chest_number: number;
    common_chest_number: number;
    electroculus_number: number;
    magic_chest_number: number;
    dendroculus_number: number;
}
interface IGenshinRecordWorldExploration {
    level: number;
    exploration_percentage: number;
    icon: string;
    name: string;
    type: string;
    offerings: {
        name: string;
        level: number;
        icon: string;
    }[];
    id: number;
    parent_id: number;
    map_url: string;
    strategy_url: string;
    background_image: string;
    inner_icon: string;
    cover: string;
}
interface IGenshinRecordHome {
    level: number;
    visit_num: number;
    comfort_num: number;
    item_num: number;
    name: string;
    icon: string;
    comfort_level_name: string;
    comfort_level_icon: string;
}
interface IGenshinRecord {
    role: {
        AvatarUrl: string;
        nickname: string;
        region: string;
        level: number;
    };
    avatars: IGenshinRecordAvatar[];
    stats: IGenshinRecordStat;
    world_explorations: IGenshinRecordWorldExploration[];
    homes: IGenshinRecordHome[];
    city_explorations: unknown[];
}

interface IGenshinCharacterWeapon {
    id: number;
    name: string;
    icon: string;
    type: number;
    rarity: number;
    level: number;
    promote_level: number;
    type_name: string;
    desc: string;
    affix_level: number;
}
interface IGenshinCharacterReliquariesSet {
    id: number;
    name: string;
    affixes: IGenshinCharacterReliquariesAffix[];
}
interface IGenshinCharacterReliquaries {
    id: number;
    name: string;
    icon: string;
    pos: number;
    rarity: number;
    level: number;
    set: IGenshinCharacterReliquariesSet;
    pos_name: string;
}
interface IGenshinCharacterReliquariesAffix {
    activation_number: number;
    effect: string;
}
interface IGenshinCharacterConstellation {
    id: number;
    name: string;
    icon: string;
    effect: string;
    is_actived: boolean;
    pos: number;
}
interface IGenshinCharacterCostume {
    id: number;
    name: string;
    icon: string;
}
interface IGenshinCharacterBase {
    id: number;
    image: string;
    icon: string;
    name: string;
    element: string;
    rarity: number;
}
interface IGenshinCharacterAvatarFull extends IGenshinCharacterBase {
    fetter: number;
    level: number;
    weapon: IGenshinCharacterWeapon;
    reliquaries: IGenshinCharacterReliquaries[] | [];
    constellations: IGenshinCharacterConstellation[];
    actived_constellation_num: number;
    costumes: IGenshinCharacterCostume[] | [];
    external: unknown | null;
}
interface IGenshinCharacterRole {
    AvatarUrl: string;
    nickname: string;
    region: string;
    level: number;
}
interface IGenshinCharacters {
    avatars: IGenshinCharacterAvatarFull[];
    role: IGenshinCharacterRole;
}
interface IGenshinCharacterSummary {
    avatars: Array<IGenshinCharacterBase & {
        weapon_type: number;
        weapon_type_name: string;
    }>;
}

interface IGenshinDailyNote {
    current_resin: number;
    max_resin: number;
    resin_recovery_time: string;
    finished_task_num: number;
    total_task_num: number;
    is_extra_task_reward_received: boolean;
    remain_resin_discount_num: number;
    resin_discount_num_limit: number;
    current_expedition_num: number;
    max_expedition_num: number;
    expeditions: {
        avatar_side_icon: string;
        status: 'Finished' | 'Ongoing';
        remained_time: string;
    }[];
    current_home_coin: number;
    max_home_coin: number;
    home_coin_recovery_time: string;
    calendar_url: string;
    transformer: {
        obtained: boolean;
        recovery_time: {
            Day: number;
            Hour: number;
            Minute: number;
            Second: number;
            reached: boolean;
        };
        wiki: string;
        noticed: boolean;
        latest_job_id: string;
    };
}

interface IGenshinSpiralAbyssRank {
    avatar_id: number;
    avatar_icon: string;
    value: number;
    rarity: number;
}
interface IGenshinSpiralAbyssAvatar {
    id: number;
    icon: string;
    level: number;
    rarity: number;
}
interface IGenshinSpiralAbyssBattle {
    index: number;
    timestamp: string;
    avatars: IGenshinSpiralAbyssAvatar[];
}
interface IGenshinSpiralAbyssLevel {
    index: number;
    star: number;
    max_star: number;
    battles: IGenshinSpiralAbyssBattle[];
}
interface IGenshinSpiralAbyssFloor {
    index: number;
    icon: string;
    is_unlock: boolean;
    settle_time: string;
    star: number;
    max_star: number;
    levels: IGenshinSpiralAbyssLevel[];
}
interface IGenshinSpiralAbyss {
    schedule_id: number;
    start_time: string;
    end_time: string;
    total_battle_times: number;
    total_win_times: number;
    max_floor: string;
    reveal_rank: IGenshinSpiralAbyssRank[];
    defeat_rank: IGenshinSpiralAbyssRank[];
    damage_rank: IGenshinSpiralAbyssRank[];
    take_damage_rank: IGenshinSpiralAbyssRank[];
    normal_skill_rank: IGenshinSpiralAbyssRank[];
    energy_skill_rank: IGenshinSpiralAbyssRank[];
    floors: IGenshinSpiralAbyssFloor[];
    total_star: number;
    is_unlock: boolean;
}

interface IGenshinDiaryBase {
    uid: number;
    region: string;
    nickname: string;
    optional_month: number[];
    data_month: number;
}
interface IGenshinDiaryInfo extends IGenshinDiaryBase {
    month: number;
    month_data: {
        current_primogems: number;
        current_mora: number;
        last_primogems: number;
        last_mora: number;
        primogem_rate: number;
        mora_rate: number;
        group_by: {
            action_id: number;
            action: string;
            num: number;
            percent: number;
        }[];
    };
    day_data: {
        current_primogems: number;
        current_mora: number;
    };
}
interface IGenshinDiaryHistory {
    action_id: number;
    action: string;
    time: string;
    num: number;
}
interface IGenshinDiaryDetail extends IGenshinDiaryBase {
    current_page: number;
    list: IGenshinDiaryHistory[];
}

interface IGenshinDailyAwardItem {
    icon: string;
    name: string;
    cnt: number;
}
interface IGenshinDailyInfo {
    total_sign_day: number;
    today: string;
    is_sign: boolean;
    first_bind: boolean;
    is_sub: boolean;
    region: string;
    month_last_day: boolean;
}
interface IGenshinDailyReward {
    month: number;
    resign: boolean;
    now: string;
    award: IGenshinDailyAwardItem;
}
interface IGenshinDailyRewards {
    month: number;
    resign: boolean;
    now: string;
    awards: IGenshinDailyAwardItem[];
}
interface IGenshinDailyClaim {
    status: string;
    code: number;
    reward: IGenshinDailyReward | null;
    info: IGenshinDailyInfo;
}

declare enum AbyssScheduleEnum {
    CURRENT = 1,
    PREVIOUS = 2
}

declare enum DiaryMonthEnum {
    CURRENT = 3,
    ONE_MONTH_AGO = 2,
    TWO_MONTH_AGO = 1
}
declare enum DiaryEnum {
    PRIMOGEMS = 1,
    MORA = 2
}

declare class Hoyolab {
    readonly cookie: ICookie;
    readonly request: Request;
    lang: LanguageEnum;
    constructor(options: IHoyolabOptions);
    /**
     * Get games available accounts
     *
     * @param game GamesEnum Selected Game
     * @returns {Promise<Interface.IGame[]>}
     */
    gamesList(game?: GamesEnum): Promise<IGame[]>;
    /**
     * Select one of highest level game account
     *
     * @param game GameEnum Selected Game
     * @returns {Promise<Interface.IGame>}
     */
    gameAccount(game: GamesEnum): Promise<IGame>;
}

declare class HoyolabError extends Error {
    readonly name: string;
    readonly message: string;
    constructor(message: string);
}

declare class Genshin {
    readonly cookie: ICookie;
    readonly request: Request;
    uid: number | null;
    region: string | null;
    lang: LanguageEnum;
    constructor(options: IGenshinOptions);
    /**
     * Create Genshin Object
     *
     * @param options IGenshinOptions Options
     * @returns {Promise<Genshin>}
     */
    static create(options: IGenshinOptions): Promise<Genshin>;
    /**
     * Fetch game records
     *
     * @returns {Promise<IGenshinRecord>}
     */
    records(): Promise<IGenshinRecord>;
    /**
     * Fetch obtained genshin characters with artifact, weapon, level and constellation
     *
     * @returns {Promise<IGenshinCharacters>}
     */
    characters(): Promise<IGenshinCharacters>;
    /**
     * Fetch characters summary detail (name, rarity, weapon, icon)
     *
     * @param characterIds number[] Characters ID
     * @returns {Promise<IGenshinCharacterSummary>}
     */
    charactersSummary(characterIds: number[]): Promise<IGenshinCharacterSummary>;
    /**
     * Fetch Spiral Abyss data
     *
     * @param scheduleType AbyssScheduleEnum
     * @returns {Promise<IGenshinSpiralAbyss>}
     */
    spiralAbyss(scheduleType?: AbyssScheduleEnum): Promise<IGenshinSpiralAbyss>;
    /**
     * Fetch daily note resources (resin, home coin, expeditions, and transformer)
     *
     * @returns {Promise<IGenshinDailyNote>}
     */
    dailyNote(): Promise<IGenshinDailyNote>;
    /**
     * Fetch genshin impact diary data
     *
     * @param month
     * @returns {Promise<IGenshinDiaryInfo>}
     */
    diaries(month?: DiaryMonthEnum): Promise<IGenshinDiaryInfo>;
    /**
     * Fetch history of received resources (primogems and mora) from diary
     *
     * @param type DiaryEnum
     * @param month DiaryMonthEnum
     * @returns {IGenshinDiaryDetail}
     */
    diaryDetail(type: DiaryEnum, month?: DiaryMonthEnum): Promise<IGenshinDiaryDetail>;
    /**
     * Fetch Daily login information
     *
     * @returns {Promise<IGenshinDailyInfo>}
     */
    dailyInfo(): Promise<IGenshinDailyInfo>;
    /**
     * Fetch all rewards from daily login
     *
     * @returns {Promise<IGenshinDailyRewards>}
     */
    dailyRewards(): Promise<IGenshinDailyRewards>;
    /**
     * Fetch reward from daily login based on day
     *
     * @param day number | null
     * @returns {Promise<IGenshinDailyReward>}
     */
    dailyReward(day?: number | null): Promise<IGenshinDailyReward>;
    /**
     * Claim current reward
     *
     * @returns {Promise<IGenshinDailyClaim>}
     */
    dailyClaim(): Promise<IGenshinDailyClaim>;
    /**
     * Redeem Code
     *
     * @param code string
     * @returns {Promise<IRedeemCode>}
     */
    redeemCode(code: string): Promise<IRedeemCode>;
}

interface IHsrOptions extends IHoyolabOptions {
    uid?: number;
}

interface IHsrDailyAwardItem {
    icon: string;
    name: string;
    cnt: number;
}
interface IHsrDailyInfo {
    total_sign_day: number;
    today: string;
    is_sign: boolean;
    is_sub: boolean;
    region: string;
}
interface IHsrDailyReward {
    month: number;
    resign: boolean;
    biz: string;
    award: IHsrDailyAwardItem;
}
interface IHsrDailyRewards {
    month: number;
    resign: boolean;
    biz: string;
    awards: IHsrDailyAwardItem[];
}
interface IHsrDailyClaim {
    status: string;
    code: number;
    reward: IHsrDailyReward | null;
    info: IHsrDailyInfo;
}

declare class HonkaiStarRail {
    readonly cookie: ICookie;
    readonly request: Request;
    uid: number | null;
    region: string | null;
    lang: LanguageEnum;
    constructor(options: IHsrOptions);
    /**
     * Create StarRails Object
     *
     * @param options IHsrOptions Options
     * @returns {Promise<HonkaiStarRail>}
     */
    static create(options: IHsrOptions): Promise<HonkaiStarRail>;
    dailyInfo(): Promise<IHsrDailyInfo>;
    /**
     * Fetch all rewards from daily login
     *
     * @returns {Promise<IHsrDailyRewards>}
     */
    dailyRewards(): Promise<IHsrDailyRewards>;
    /**
     * Fetch reward from daily login based on day
     *
     * @param day number | null
     * @returns {Promise<IHsrDailyReward>}
     */
    dailyReward(day?: number | null): Promise<IHsrDailyReward>;
    /**
     * Claim current reward
     *
     * @returns {Promise<IHsrDailyClaim>}
     */
    dailyClaim(): Promise<IHsrDailyClaim>;
    /**
     * Redeem Code
     *
     * @param code string
     * @returns {Promise<IRedeemCode>}
     */
    redeemCode(code: string): Promise<IRedeemCode>;
}

declare class Cookie {
    /**
     * Parse Cookie string to ICookie Object
     *
     * @param cookieString string String cookies sourced from the hoyolab page
     * @returns {ICookie}
     */
    static parseCookieString(cookieString: string): ICookie;
    /**
     * Parse Cookie object to cookie string
     *
     * @param cookie ICookie
     * @returns {string}
     */
    static parseCookie(cookie: ICookie): string;
}

declare const GAMES_ACCOUNT = "https://api-account-os.hoyolab.com/account/binding/api/getUserGameRolesByCookieToken";
declare const GENSHIN_GAME_RECORD_REFERER = "https://act.hoyolab.com";
declare const GENSHIN_GAME_RECORD: string;
declare const GENSHIN_CHARACTERS_LIST: string;
declare const GENSHIN_CHARACTERS_SUMMARY: string;
declare const GENSHIN_SPIRAL_ABYSS: string;
declare const GENSHIN_DAILY_NOTE: string;
declare const GENSHIN_DIARY: string;
declare const GENSHIN_DIARY_DETAIL: string;
declare const GENSHIN_DAILY_INFO: string;
declare const GENSHIN_DAILY_REWARD: string;
declare const GENSHIN_DAILY_CLAIM: string;
declare const HSR_DAILY_INFO: string;
declare const HSR_DAILY_REWARD: string;
declare const HSR_DAILY_CLAIM: string;
declare const GENSHIN_REDEEM_CODE: string;

declare const routes_GAMES_ACCOUNT: typeof GAMES_ACCOUNT;
declare const routes_GENSHIN_CHARACTERS_LIST: typeof GENSHIN_CHARACTERS_LIST;
declare const routes_GENSHIN_CHARACTERS_SUMMARY: typeof GENSHIN_CHARACTERS_SUMMARY;
declare const routes_GENSHIN_DAILY_CLAIM: typeof GENSHIN_DAILY_CLAIM;
declare const routes_GENSHIN_DAILY_INFO: typeof GENSHIN_DAILY_INFO;
declare const routes_GENSHIN_DAILY_NOTE: typeof GENSHIN_DAILY_NOTE;
declare const routes_GENSHIN_DAILY_REWARD: typeof GENSHIN_DAILY_REWARD;
declare const routes_GENSHIN_DIARY: typeof GENSHIN_DIARY;
declare const routes_GENSHIN_DIARY_DETAIL: typeof GENSHIN_DIARY_DETAIL;
declare const routes_GENSHIN_GAME_RECORD: typeof GENSHIN_GAME_RECORD;
declare const routes_GENSHIN_GAME_RECORD_REFERER: typeof GENSHIN_GAME_RECORD_REFERER;
declare const routes_GENSHIN_REDEEM_CODE: typeof GENSHIN_REDEEM_CODE;
declare const routes_GENSHIN_SPIRAL_ABYSS: typeof GENSHIN_SPIRAL_ABYSS;
declare const routes_HSR_DAILY_CLAIM: typeof HSR_DAILY_CLAIM;
declare const routes_HSR_DAILY_INFO: typeof HSR_DAILY_INFO;
declare const routes_HSR_DAILY_REWARD: typeof HSR_DAILY_REWARD;
declare namespace routes {
  export {
    routes_GAMES_ACCOUNT as GAMES_ACCOUNT,
    routes_GENSHIN_CHARACTERS_LIST as GENSHIN_CHARACTERS_LIST,
    routes_GENSHIN_CHARACTERS_SUMMARY as GENSHIN_CHARACTERS_SUMMARY,
    routes_GENSHIN_DAILY_CLAIM as GENSHIN_DAILY_CLAIM,
    routes_GENSHIN_DAILY_INFO as GENSHIN_DAILY_INFO,
    routes_GENSHIN_DAILY_NOTE as GENSHIN_DAILY_NOTE,
    routes_GENSHIN_DAILY_REWARD as GENSHIN_DAILY_REWARD,
    routes_GENSHIN_DIARY as GENSHIN_DIARY,
    routes_GENSHIN_DIARY_DETAIL as GENSHIN_DIARY_DETAIL,
    routes_GENSHIN_GAME_RECORD as GENSHIN_GAME_RECORD,
    routes_GENSHIN_GAME_RECORD_REFERER as GENSHIN_GAME_RECORD_REFERER,
    routes_GENSHIN_REDEEM_CODE as GENSHIN_REDEEM_CODE,
    routes_GENSHIN_SPIRAL_ABYSS as GENSHIN_SPIRAL_ABYSS,
    routes_HSR_DAILY_CLAIM as HSR_DAILY_CLAIM,
    routes_HSR_DAILY_INFO as HSR_DAILY_INFO,
    routes_HSR_DAILY_REWARD as HSR_DAILY_REWARD,
  };
}

export { AbyssScheduleEnum, BodyType, Cache, Cookie, DiaryEnum, DiaryMonthEnum, GamesEnum, Genshin, HonkaiStarRail, Hoyolab, HoyolabError, ICookie, IGame, IGamesList, IGenshinCharacterAvatarFull, IGenshinCharacterBase, IGenshinCharacterConstellation, IGenshinCharacterCostume, IGenshinCharacterReliquaries, IGenshinCharacterReliquariesAffix, IGenshinCharacterReliquariesSet, IGenshinCharacterRole, IGenshinCharacterSummary, IGenshinCharacterWeapon, IGenshinCharacters, IGenshinDailyAwardItem, IGenshinDailyClaim, IGenshinDailyInfo, IGenshinDailyNote, IGenshinDailyReward, IGenshinDailyRewards, IGenshinDiaryBase, IGenshinDiaryDetail, IGenshinDiaryHistory, IGenshinDiaryInfo, IGenshinOptions, IGenshinRecord, IGenshinRecordAvatar, IGenshinRecordHome, IGenshinRecordStat, IGenshinRecordWorldExploration, IGenshinSpiralAbyss, IGenshinSpiralAbyssAvatar, IGenshinSpiralAbyssBattle, IGenshinSpiralAbyssFloor, IGenshinSpiralAbyssLevel, IGenshinSpiralAbyssRank, IHoyolabOptions, IRedeemCode, IResponse, LanguageEnum, Request, routes as Route, getServerRegion, parseLang, toCamelCase, toSnakeCase };
